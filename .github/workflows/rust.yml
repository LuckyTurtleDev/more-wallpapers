name: Rust

on:
  push:
  pull_request:

jobs:
  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt
      - run: cargo fmt --all -- --check
      
  doc2readme:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/msrd0/cargo-doc2readme:nightly
    steps:
    - uses: actions/checkout@v3
    - run: apk add --no-cache libxrandr-dev
    - run: cargo doc2readme --check --expand-macros --manifest-path more-wallpapers/Cargo.toml
    
  check:
    strategy:
      matrix:
        os:
          - name: "linux"
            id: ubuntu
          - name: "win  "
            id: windows
          - name: "mac  "
            id: macos
        features: ["", --all-features, --features rand, --features fallback]
        rust_version: [stable, 1.62]
        workspace: [-p more-wallpapers]
        include:
          - workspace: -p setmw
            rust_version: stable
            os: ubuntu
          - workspace: -p setmw
            rust_version: stable
            os: windows
          - workspace: -p setmw
            rust_version: stable
            os: macos
        exclude:
        - os.id: windows
          features: --features rand
        - os.id: windows
          features: ""
        - os.id: macos
          features: --features rand
        - os.id: macos
          features: ""
    name: "${{ matrix.os.name }} ${{ matrix.rust_version }} ${{ matrix.features }} ${{ matrix.workspace }}"
    continue-on-error: true
    runs-on: ${{ matrix.os.id }}-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust_version }}
        id: "rust-toolchain"
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/git
            ~/.cargo/registry
            target
          key: "${{runner.os}} Rust ${{steps.rust-toolchain.outputs.cachekey}} ${{matrix.features}} ${{ matrix.workspace }}"
          restore-keys: "${{runner.os}} Rust ${{steps.rust-toolchain.outputs.cachekey}}"
      - name: Install xrandr
        if:  ${{ matrix.os.id == 'ubuntu' }}
        run: sudo apt-get update && sudo apt-get install -y libxrandr-dev
      - run: cargo test ${{ matrix.workspace }} ${{ matrix.features }}
        env:
          RUST_BACKTRACE: 1
